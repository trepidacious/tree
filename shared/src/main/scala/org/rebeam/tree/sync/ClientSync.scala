package org.rebeam.tree.sync

import org.rebeam.tree.Delta
import org.rebeam.tree.sync.Sync._

object ClientSync {

  /**
    * ADT for the two options we can receive from the server representing a delta in an update - either just a
    * DeltaId for a delta that came from this client, or a DeltaId and actual delta for a delta
    * generated by another client
    *
    * @tparam A The model type
    */
  sealed trait UpdateDelta[A] {
    def id: DeltaId
  }

  /**
    * A delta generated remotely, by another client, relayed to us by the server in an update
    *
    * @param delta The delta
    * @param id    The id of the delta
    * @tparam A The model type
    */
  case class RemoteDelta[A](delta: Delta[A], id: DeltaId) extends UpdateDelta[A]

  /**
    * A delta generated locally, by this client, then referenced by the server in an update
    *
    * @param id The id of the delta
    * @tparam A The model type
    */
  case class LocalDelta[A](id: DeltaId) extends UpdateDelta[A]

  /**
    * Sealed trait of model updates sent from server to client
    *
    * @tparam A The model type
    */
  sealed trait ModelUpdate[A]

  /**
    * An incremental update received from the server, building a new model based
    * on an existing base model assumed to be held by the client.
    *
    * @param baseModelId    The ModelId of the base model from which we will produce the updated model
    * @param updates        The updates to apply to the base model to produce the updated model
    * @param updatedModelId The ModelId of the updated model
    * @tparam A The type of model
    */
  case class ModelIncrementalUpdate[A](
                                        baseModelId: ModelId,
                                        updates: Seq[UpdateDelta[A]],
                                        updatedModelId: ModelId) extends ModelUpdate[A]

  /**
    * A full update received from server, directly setting a new model and overwriting
    * any pending deltas. The first update from the server must always be of this form.
    *
    * @param clientId The client id for the client. Sets id on first update, and
    *                 may be used to change client id on subsequent full updates.
    * @param model    The full model, and id
    * @tparam A The type of model
    */
  case class ModelFullUpdate[A](
                                 clientId: ClientId,
                                 model: ModelAndId[A]) extends ModelUpdate[A]

}


